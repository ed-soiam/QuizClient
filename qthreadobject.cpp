#include "qthreadobject.h"
#include <QApplication>

QThreadObject::QThreadObject() : QObject(nullptr)
{
    f_doStop = false;      //остановить
    f_stopped = true;      //остановлен
}

QThreadObject::~QThreadObject()
{
    f_doStop = true;          //Насат процесс заверешния
    emit destroyed(this);     //void QObject::destroyed(QObject *obj = Q_NULLPTR) Этот сигнал испускается непосредственно перед уничтожением объекта obj и не может быть заблокирован.
                              //Все дети объектов уничтожаются сразу же после выхода этого сигнала.

    thread->deleteLater(); //Задает этот объект для удаления. Объект будет удален, когда управление вернется в цикл событий. Если цикл события не запускается при вызове этой функции (например, deleteLater () вызывается в объекте до QCoreApplication :: exec ()), объект будет удален после запуска цикла события. Если вызов deleteLater () вызывается после того, как цикл основного события остановлен, объект не будет удален. Поскольку Qt 4.8, если deleteLater () вызывается на объекте, который живет в потоке без цикла цикла выполнения, объект будет уничтожен, когда поток завершится.
    //Обратите внимание, что ввод и выход из нового цикла событий (например, путем открытия модального диалога) не будет выполнять отложенное удаление; для объекта, который должен быть удален, элемент управления должен вернуться к циклу событий, из которого был вызван метод deleteLater ().
    //В осуществляется whenFinished() выход thread -> exit();
    while (!f_stopped)
        QApplication::processEvents(QEventLoop::AllEvents, 1); //Обработает все ожидающие события для вызывающего потока в соответствии с указанными флажками, пока не будет больше событий для обработки.
}

void QThreadObject::start()
{
    f_doStop = false;     //Нет команды на завершение
    f_stopped = false;    //Поток запушен
    thread = new QThread();
    connect( thread, SIGNAL(started()), this, SLOT(process())); //Это частный сигнал QThread.
    //process() - это виртуальный слот реализованный в наследнике.
    //started( Этот сигнал испускается из связанного потока, когда он запускается, перед вызовом функции run ().
    //Класс получается универсальным и может использоваться многими наследниками с переопределенной виртуальной функцией process()
    connect( this, SIGNAL (finished()), this, SLOT(whenFinished()), Qt::QueuedConnection); //Сигнал определен в этом классе, но испускается в наследнике.
    //Сигнан нужен для заврешения процесса. В общем при уничтожении наследника, уничтожается и родитель, но процесс нужно правильно завершить.
    moveToThread(thread);   //Изменяет сходство потоков для этого объекта и его дочерних элементов.
                            //Объект нельзя перемещать, если он имеет родителя. Обработка событий будет продолжена в targetThread.
    thread -> start();      //Начинает выполнение потока, вызывая run ().
}


void QThreadObject::whenFinished() //Вызывается после деструктора для окончательного завершения
{
    f_doStop = false;
    f_stopped = true;    
    thread -> exit();  //Сообщает, что цикл событий потока завершится с кодом возврата. После вызова этой функции поток покидает цикл событий
    //thread -> deleteLater();  //Объект будет удален, когда управление вернется в цикл событий.
}
